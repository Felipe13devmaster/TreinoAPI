// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicPlayer.Data;

namespace MusicPlayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MusicPlayer.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnoLancamento")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Albuns");
                });

            modelBuilder.Entity("MusicPlayer.Models.AlbumArtista", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistaId")
                        .HasColumnType("int");

                    b.HasKey("AlbumId", "ArtistaId");

                    b.HasIndex("ArtistaId");

                    b.ToTable("AlbunsArtistas");
                });

            modelBuilder.Entity("MusicPlayer.Models.AlbumGenero", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("GeneroMusicalId")
                        .HasColumnType("int");

                    b.HasKey("AlbumId", "GeneroMusicalId");

                    b.HasIndex("GeneroMusicalId");

                    b.ToTable("AlbunsGeneros");
                });

            modelBuilder.Entity("MusicPlayer.Models.AlbumMusica", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("MusicaId")
                        .HasColumnType("int");

                    b.HasKey("AlbumId", "MusicaId");

                    b.HasIndex("MusicaId");

                    b.ToTable("AlbunsMusicas");
                });

            modelBuilder.Entity("MusicPlayer.Models.Artista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Artistas");
                });

            modelBuilder.Entity("MusicPlayer.Models.GeneroMusical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("GenerosMusicais");
                });

            modelBuilder.Entity("MusicPlayer.Models.Musica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("DuracaoMinutos")
                        .HasColumnType("float");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Musicas");
                });

            modelBuilder.Entity("MusicPlayer.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("DuracaoMinutos")
                        .HasColumnType("float");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistMusica", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("MusicaId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId", "MusicaId");

                    b.HasIndex("MusicaId");

                    b.ToTable("PlaylistsMusicas");
                });

            modelBuilder.Entity("MusicPlayer.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("MusicPlayer.Models.UsuarioPlaylist", b =>
                {
                    b.Property<int>("Usuarioid")
                        .HasColumnType("int");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.HasKey("Usuarioid", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("UsuariosPlaylists");
                });

            modelBuilder.Entity("MusicPlayer.Models.AlbumArtista", b =>
                {
                    b.HasOne("MusicPlayer.Models.Album", "Album")
                        .WithMany("AlbunsArtistas")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.Artista", "Artista")
                        .WithMany("AlbunsArtistas")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlayer.Models.AlbumGenero", b =>
                {
                    b.HasOne("MusicPlayer.Models.Album", "Album")
                        .WithMany("AlbunsGeneros")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.GeneroMusical", "GeneroMusical")
                        .WithMany("AlbunsGeneros")
                        .HasForeignKey("GeneroMusicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlayer.Models.AlbumMusica", b =>
                {
                    b.HasOne("MusicPlayer.Models.Album", "Album")
                        .WithMany("AlbunsMusicas")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.Musica", "Musica")
                        .WithMany("AlbunsMusicas")
                        .HasForeignKey("MusicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistMusica", b =>
                {
                    b.HasOne("MusicPlayer.Models.Musica", "Musica")
                        .WithMany("PlaylistsMusicas")
                        .HasForeignKey("MusicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.Playlist", "Playlist")
                        .WithMany("PlaylistsMusicas")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlayer.Models.UsuarioPlaylist", b =>
                {
                    b.HasOne("MusicPlayer.Models.Playlist", "Playlist")
                        .WithMany("UsuariosPlaylists")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.Usuario", "Usuario")
                        .WithMany("UsuariosPlaylists")
                        .HasForeignKey("Usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
